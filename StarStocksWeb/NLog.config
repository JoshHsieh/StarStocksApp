<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="true"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log" >


  <!-- optional, add some variabeles
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="myvar" value="myvalue"/>

  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
    <add assembly="NLog.Database" />
  </extensions>
  <!-- 
  See https://github.com/nlog/nlog/wiki/Configuration-file 
  for information on customizing logging rules and outputs.
   -->
  <targets>

    <!-- 
    add your targets here 
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename. 
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
    <!-- 將 log 寫入 db, 上線時才需要用到 -->
    <target name="dbLog" xsi:type="Database"
            connectionString="${configsetting:item=ConnectionStrings.AlgoDataDbConnection}"
            dbProvider="Npgsql.NpgsqlConnection, Npgsql"
            commandText="INSERT INTO public.app_log (customer_id, time_stamp, log_level, call_site, logger, message, exception_msg, stack_trace) VALUES ( @CustomerId, CAST(@time_stamp AS timestamp), @level, @callSite, @logger, @message, @exception, @stack);"
            >
      <!--<parameter layout="${event-properties:item=CustomerId}" name="@CustomerId"/>-->
      <parameter layout="test" name="@CustomerId"/>
      <!-- custom field! Note also the DB Type -->
      <parameter layout="${date}" name="@time_stamp" />
      <parameter layout="${level}" name="@level" />
      <parameter layout="${logger}" name="@logger" />
      <parameter layout="Caller: ${callsite} |Line: ${callsite-linenumber}" name="@callSite" />
      <parameter layout="${message}" name="@message" />
      <parameter layout="${exception:format=ToString}" name="@exception" />
      <parameter layout="${stacktrace}" name="@stack" />
    </target>
    <target xsi:type="File" name="fLog" fileName="${basedir}/Logs/${shortdate}.log"
                        layout="${longdate} [${uppercase:${level}}] ${message}" />
    <!--  寫到 output window  -->
    <target xsi:type="Debugger" name="TraceDebugger" layout="
              ==========================================================${newline}
              ${longdate} ${newline}
              ${level:uppercase=true} ${newline}
              Controller: ${logger} ${newline}
              Message: ${message} ${newline}
              ==========================================================${newline}" />

    <target xsi:type="Debugger" name="DebugDebugger" layout="
              ==========================================================${newline}
              ${longdate} ${newline}
              ${level:uppercase=true} ${newline}
              Controller: ${logger} ${newline}
              Action: ${callsite:className=false:methodName=true} ${newline}
              Message: ${message} ${newline}
              ==========================================================${newline}
              " />

    <target name="TcpOutlet" xsi:type="NLogViewer" address="tcp://127.0.0.1:4505"/>

    <target name="coloredConsole" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="true"
      layout="${longdate}|[${pad:padding=5:inner=${level:uppercase=true}}] ${logger}:${callsite:className=false:methodName=true} | ${message}" >
      <!--
            <highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
            <highlight-row condition="level == LogLevel.Info" foregroundColor="DarkYellow" />
            <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
            <highlight-row condition="level == LogLevel.Error" foregroundColor="DarkRed" />
            <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
            -->
    </target>
  </targets>

  <rules>
    <!-- add your logging rules here -->
    <!-- 開發時用 -->
    <!--  寫入檔案  -->
    <!-- <logger name="*" levels="Error,Fatal" writeTo="fLog" />-->
    <!--  寫到 VS 的 output window -->
    <!--
    <logger name="*" levels="Trace" writeTo="TraceDebugger" />
    <logger name="*" minlevel="Debug" writeTo="DebugDebugger" />
    -->
    <!-- 上線時用 -->
    <!--<logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" writeTo="dbLog" />-->
    <!--  寫到 log2console-->
    <logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" writeTo="TcpOutlet" />
    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
  </rules>
</nlog>